stages:
  - test
  - dast-scan
  - build
  

variables:
  DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA


build_backend:
  image: docker:latest
  services:
    - docker:dind
  stage: build
  before_script:
    - cd api
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE_TAG .
    - docker push $DOCKER_IMAGE_TAG
  only:
  - /^feature-.*$/ 

lint-frontend:
  stage: test
  image: node:latest
  cache:
    paths:
      - angular-app/node_modules/
  before_script:
    - cd angular-app
    - npm install
    - npm install -g @angular/cli
  script:
    - npm run lint
  allow_failure: true
  artifacts:
    paths:
      - angular-app/eslint-reports/
  only:
  - /^feature-.*$/ 
build-frontend:
  stage: build
  image: node:latest
  cache:
    paths:
      - angular-app/node_modules/
  before_script:
    - cd angular-app
    - npm install
    - npm install -g @angular/cli
  script:
    - npm run build --prod
  only:
  - /^feature-.*$/   

test:
  image: cypress/base

  stage: test
  before_script:
    - cd angular-app
    - npm install
    
  script:
    # install dependencies
    
    # start the server in the background
    - npm start &
    # run Cypress tests
    - npm run cypress:run

unit-test-frontend:
  stage: test
  image: trion/ng-cli-karma
  
  before_script:
    - cd angular-app
    
    
  script:
    - npm ci
    - ng test --progress false --watch false
  only:
  - /^feature-.*$/    
  
lint-test-backend:
  image: python:3.8.0-slim
  stage: test
  before_script:
    - cd api
    - pip install flake8-html
  script:
    - flake8 --format=html --htmldir=flake_reports/ || true
  artifacts:
    when: always
    paths:
      - api/flake_reports/
  only:
  - /^feature-.*$/    
  
pytest-backend:
  image: python:3.8.0-slim
  stage: test
  before_script:
    - cd api 
    - pip install pytest-html
    - pip install -r requirements.txt  
  script:
    - pytest --html=pytest_reports/pytest-report.html --self-contained-html
  artifacts:
    when: always
    paths:
      - api/pytest_reports/
  only:
  - /^feature-.*$/    

run-sast-job:
  stage: test
  image: python:3.8-slim
  before_script:
    - cd api
    
  script: |
    apt-get update && apt-get install -y unzip curl jq
    curl -OL https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
    unzip sonar-scanner-cli-5.0.1.3006-linux.zip
    export PATH="$PATH:$(pwd)/sonar-scanner-5.0.1.3006-linux/bin"
    sonar-scanner -Dsonar.projectKey=pawadopt_pawadopt -Dsonar.organization=pawadopt -Dsonar.host.url=https://sonarcloud.io/ -Dsonar.login=$SONAR_TOKEN
    sleep 5 
    quality_status=$(curl -s -u $SONAR_TOKEN: https://sonarcloud.io/api/qualitygates/project_status?projectKey=pawadopt_pawadopt | jq -r '.projectStatus.status')
    echo "SonarCloud Analysis Status is $quality_status"; 
    if [[ $quality_status == "ERROR" ]] ; then exit 1;fi 
  only:
  - /^feature-.*$/ 

snyk_scan:
  stage: test
  image: python:3.8-slim
  before_script:
    - cd api
    - python -V  
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
  script: |
    apt-get update -y
    apt-get install nodejs npm -y
    npm install -g snyk
    snyk auth $SNYK_TOKEN
    snyk test --file=requirements.txt 
  only:
  - /^feature-.*$/    
    
run-dast-job:
  stage: test
  image: maven:3.8.5-openjdk-11-slim
  before_script:
    - cd api
  script: |
    apt-get update
    apt-get -y install wget
    wget https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2.14.0_Linux.tar.gz
    mkdir zap
    tar -xvf ZAP_2.14.0_Linux.tar.gz
    cd ZAP_2.14.0
    ./zap.sh -cmd -quickurl https://$FEATURE_APP.herokuapp.com/ -quickprogress -quickout ../zap_report.html 
  artifacts:
    paths:
      - api/zap_report.html
  only:
  - /^feature-.*$/    
